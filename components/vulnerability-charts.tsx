"use client"

import * as React from "react"
import { Card } from "@/components/ui/card"
import { Bar, BarChart, Line, LineChart, ResponsiveContainer, XAxis, YAxis, Legend, CartesianGrid } from "recharts"
import type { Vulnerability } from "@/lib/types"
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"

interface VulnerabilityChartsProps {
  vulnerabilities: Vulnerability[]
  simulatedVulnerabilities?: Vulnerability[] | null
}

export function VulnerabilityCharts({ vulnerabilities, simulatedVulnerabilities }: VulnerabilityChartsProps) {
  // Prepare data for vulnerability type distribution
  const typeDistribution = React.useMemo(() => {
    const counts: Record<string, { original: number; simulated: number }> = {}

    vulnerabilities.forEach((v) => {
      if (!counts[v.type]) {
        counts[v.type] = { original: 0, simulated: 0 }
      }
      counts[v.type].original++
    })

    if (simulatedVulnerabilities) {
      simulatedVulnerabilities.forEach((v) => {
        if (!counts[v.type]) {
          counts[v.type] = { original: 0, simulated: 0 }
        }
        counts[v.type].simulated++
      })
    }

    return Object.entries(counts).map(([type, data]) => ({
      type: type.split(" ")[0], // Shorten labels
      original: data.original,
      simulated: simulatedVulnerabilities ? data.simulated : data.original,
    }))
  }, [vulnerabilities, simulatedVulnerabilities])

  const severityComparison = React.useMemo(() => {
    const data = vulnerabilities.map((v, index) => {
      const simulated = simulatedVulnerabilities?.[index]
      return {
        name: `V${index + 1}`,
        original: (v.severity * 100).toFixed(0),
        simulated: simulated ? (simulated.severity * 100).toFixed(0) : (v.severity * 100).toFixed(0),
      }
    })
    return data
  }, [vulnerabilities, simulatedVulnerabilities])

  // Calculate overall metrics
  const metrics = React.useMemo(() => {
    const originalAvg = vulnerabilities.reduce((sum, v) => sum + v.severity, 0) / vulnerabilities.length
    const simulatedAvg = simulatedVulnerabilities
      ? simulatedVulnerabilities.reduce((sum, v) => sum + v.severity, 0) / simulatedVulnerabilities.length
      : originalAvg

    return {
      originalScore: ((1 - originalAvg) * 100).toFixed(0),
      simulatedScore: ((1 - simulatedAvg) * 100).toFixed(0),
      improvement: (((simulatedAvg - originalAvg) / originalAvg) * -100).toFixed(1),
    }
  }, [vulnerabilities, simulatedVulnerabilities])

  return (
    <div className="space-y-4">
      {/* Metrics Overview */}
      <div className="grid grid-cols-3 gap-4">
        <Card className="p-4">
          <p className="text-xs text-muted-foreground">Environmental Quality (Original)</p>
          <p className="text-3xl font-bold text-[#0B3D91]">{metrics.originalScore}</p>
          <p className="text-xs text-muted-foreground">out of 100</p>
        </Card>
        <Card className="p-4">
          <p className="text-xs text-muted-foreground">Environmental Quality (Simulated)</p>
          <p className="text-3xl font-bold text-[#2ECC71]">{metrics.simulatedScore}</p>
          <p className="text-xs text-muted-foreground">out of 100</p>
        </Card>
        <Card className="p-4">
          <p className="text-xs text-muted-foreground">Improvement</p>
          <p
            className={`text-3xl font-bold ${Number(metrics.improvement) > 0 ? "text-[#2ECC71]" : "text-muted-foreground"}`}
          >
            {Number(metrics.improvement) > 0 ? "+" : ""}
            {metrics.improvement}%
          </p>
          <p className="text-xs text-muted-foreground">change</p>
        </Card>
      </div>

      {/* Charts */}
      <div className="grid gap-4 lg:grid-cols-2">
        {/* Vulnerability Type Distribution */}
        <Card className="p-4">
          <h3 className="mb-4 font-semibold">Vulnerability Distribution</h3>
          <ChartContainer
            config={{
              original: {
                label: "Original",
                color: "#0B3D91",
              },
              simulated: {
                label: "Simulated",
                color: "#2ECC71",
              },
            }}
            className="h-[300px]"
          >
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={typeDistribution}>
                <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border))" />
                <XAxis dataKey="type" className="text-xs" />
                <YAxis className="text-xs" />
                <ChartTooltip content={<ChartTooltipContent />} />
                <Legend />
                <Bar dataKey="original" fill="#0B3D91" name="Original" radius={[4, 4, 0, 0]} />
                {simulatedVulnerabilities && (
                  <Bar dataKey="simulated" fill="#2ECC71" name="Simulated" radius={[4, 4, 0, 0]} />
                )}
              </BarChart>
            </ResponsiveContainer>
          </ChartContainer>
        </Card>

        {/* Severity Comparison */}
        <Card className="p-4">
          <h3 className="mb-4 font-semibold">Severity Levels (Before/After)</h3>
          <ChartContainer
            config={{
              original: {
                label: "Original",
                color: "#E74C3C",
              },
              simulated: {
                label: "Simulated",
                color: "#2ECC71",
              },
            }}
            className="h-[300px]"
          >
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={severityComparison}>
                <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border))" />
                <XAxis dataKey="name" className="text-xs" />
                <YAxis className="text-xs" domain={[0, 100]} />
                <ChartTooltip content={<ChartTooltipContent />} />
                <Legend />
                <Line
                  type="monotone"
                  dataKey="original"
                  stroke="#E74C3C"
                  strokeWidth={2}
                  name="Original"
                  dot={{ r: 4 }}
                />
                {simulatedVulnerabilities && (
                  <Line
                    type="monotone"
                    dataKey="simulated"
                    stroke="#2ECC71"
                    strokeWidth={2}
                    name="Simulated"
                    dot={{ r: 4 }}
                  />
                )}
              </LineChart>
            </ResponsiveContainer>
          </ChartContainer>
        </Card>
      </div>

      {/* Population Impact */}
      <Card className="p-4">
        <h3 className="mb-4 font-semibold">Population Impact Analysis</h3>
        <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
          {vulnerabilities.slice(0, 4).map((v, index) => (
            <div key={v.id} className="rounded-lg border border-border bg-muted/50 p-3">
              <p className="mb-1 text-xs font-medium text-muted-foreground">{v.type}</p>
              <p className="text-xl font-bold">{(v.population_affected / 1000).toFixed(0)}K</p>
              <p className="text-xs text-muted-foreground">people affected</p>
              <div className="mt-2 h-1.5 overflow-hidden rounded-full bg-background">
                <div className="h-full rounded-full bg-[#E74C3C]" style={{ width: `${v.severity * 100}%` }} />
              </div>
            </div>
          ))}
        </div>
      </Card>
    </div>
  )
}
